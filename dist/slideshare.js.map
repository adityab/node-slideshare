{"version":3,"sources":["slideshare.js"],"names":[],"mappings":"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","file":"slideshare.js","sourcesContent":["var rest = require('restler');\n\nvar crypto = require('crypto');\nvar url = require('url');\n\nfunction sha1(data) {\n    var generator = crypto.createHash('sha1');\n    generator.update(data);\n    return generator.digest('hex');\n}\n\nvar SlideShare = function(key, secret) {\n    this.api_key = key;\n    this.secret = secret;\n};\n\nSlideShare.prototype = {\n    api_key: '',\n    secret: '',\n    api_url: 'https://www.slideshare.net/api/2/',\n\n    // The timestamp\n    timestamp: function() {\n        return Math.round(new Date().getTime() / 1000);\n    },\n    // The hash method: returns the current hash\n    currentHash: function() {\n        return sha1(this.secret + this.timestamp());\n    },\n    // Get core parameters required in every API call\n    coreParams: function() {\n        return {\n            parser: rest.parsers.xml,\n            data: {\n                api_key: this.api_key,\n                ts: this.timestamp(),\n                hash: this.currentHash()\n            }\n        }\n    },\n\n    // API Calls\n    /**\n     * Get a slideshow by it's id\n     * @param {string} id The id of the slideshow\n     * @return {Object} A slideshow object\n     */\n    getSlideshowById: function(id, opts, callback) {\n        if (typeof opts === \"function\") {\n            callback = opts;\n            opts = {};\n        }\n        opts.slideshow_id = id;\n        this.getSlideshow(opts, callback);\n    },\n\n    /**\n     * Get a slideshow by its url\n     * @param {string} slideShareUrl The url of the slideshow\n     * @return {Object} A slideshow object\n     */\n    getSlideshowByURL: function(slideShareUrl, opts, callback) {\n        if (typeof opts === \"function\") {\n            callback = opts;\n            opts = {};\n        }\n        opts = opts || {};\n        // The SlideShare API does not take URLs that have querystring parameters so we condense `slideshow_url`\n        // to the minimal URL.\n        // ex: Given `http://www.slideshare.net/username/slideshow?from_search=4` we will request:\n        // `http://www.slideshare.net/username/slideshow`\n        var parsedUrl = url.parse(slideShareUrl);\n        opts.slideshow_url = parsedUrl.protocol + '//' + parsedUrl.host + parsedUrl.pathname;\n        this.getSlideshow(opts, callback);\n    },\n\n    getSlideshow: function(opts, callback) {\n        var params = this.coreParams();\n        for (var key in opts) {\n            params.data[key] = opts[key];\n        }\n        rest.get(this.api_url + 'get_slideshow', params).on('complete', function(data) {\n            return callback(data);\n        });\n    },\n\n    /**\n     * Get slideshows by a tag name\n     * @param {string} tag The tag name\n     * @param {Object} opts Optional parameters, for example { limit: 10, offset: 2, detailed: true }, or null.\n     * @return {Object} An object containing an array of slideshows\n     */\n    getSlideshowsByTag: function(tag, opts, callback) {\n        var params = this.coreParams();\n        params.data.tag = tag;\n        if(opts != null) {\n            params.data.limit = opts.limit;\n            params.data.offset = opts.offset;\n            params.data.detailed = opts.detailed;\n        }\n        rest.get(this.api_url + 'get_slideshows_by_tag', params).on('complete', function(data) {\n            return callback(data);\n        });\n    },\n\n    /**\n     * Get slideshows by a group\n     * @param {string} group_name The group name\n     * @param {Object} opts Optional parameters, for example { limit: 10, offset: 2, detailed: true }, or null.\n     * @return {Object} An object containing an array of slideshows\n     */\n    getSlideshowsByGroup: function(group_name, opts, callback) {\n        var params = this.coreParams();\n        params.data.group_name = group_name;\n        if(opts != null) {\n            params.data.limit = opts.limit;\n            params.data.offset = opts.offset;\n            params.data.detailed = opts.detailed;\n        }\n        rest.get(this.api_url + 'get_slideshows_by_group', params).on('complete', function(data) {\n            return callback(data);\n        });\n    },\n\n    /**\n     * Get slideshows by user\n     * @param {string} username_for username of owner of slideshows\n     * @param {Object} opts Optional parameters, for example { username: 'john', password: 'doe', limit: 10, offset: 2, detailed: true, get_unconverted: false }, or null.\n     * @return {Object} An object containing an array of slideshows\n     */\n    getSlideshowsByUser: function(username_for, opts, callback) {\n        var params = this.coreParams();\n        params.data.username_for = username_for;\n        if(opts != null) {\n            if(opts.username != undefined && opts.password != undefined) {\n                params.data.username = opts.username;\n                params.data.password = opts.password;\n            }\n            params.data.limit = opts.limit;\n            params.data.offset = opts.offset;\n            params.data.detailed = opts.detailed;\n            params.data.get_unconverted = opts.get_unconverted;\n        }\n        rest.get(this.api_url + 'get_slideshows_by_user', params).on('complete', function(data) {\n            return callback(data);\n        });\n    },\n\n    /**\n     * Search Slideshows\n     * @param {string} q the query string\n     * @param {Object} opts Optional parameters, for example { page: 2, items_per_page: 10, lang: 'en', sort: 'latest', fileformat: 'pdf', detailed: true }, or null.\n     * @return {Object} An object containing an array of slideshows\n     */\n    searchSlideshows: function(q, opts, callback) {\n        var params = this.coreParams();\n        params.data.q = q;\n        if(opts != null) {\n            params.data.detailed = opts.detailed;\n            params.data.page = opts.page;\n            params.data.items_per_page = opts.items_per_page;\n            params.data.lang = opts.lang;\n            params.data.sort = opts.sort;\n            params.data.upload_date = opts.upload_date;\n            params.data.what = opts.what;\n            params.data.download = opts.download;\n            params.data.fileformat = opts.fileformat;\n            params.data.file_type = opts.file_type;\n            params.data.cc = opts.cc;\n            params.data.cc_adapt = opts.cc_adapt;\n            params.data.cc_commercial = opts.cc_commercial;\n        }\n        rest.get(this.api_url + 'search_slideshows', params).on('complete', function(data) {\n            return callback(data);\n        });\n    },\n\n    /**\n     * Get user groups\n     * @param {string} username_for username of owner of slideshows\n     * @param {Object} opts Optional parameters, for example { username: 'john', password: 'doe' }, or null.\n     * @return {Object} An object containing an array of groups\n     */\n    getUserGroups: function(username_for, opts, callback) {\n        var params = this.coreParams();\n        params.data.username_for = username_for;\n        if(opts != null) {\n            if(opts.username != undefined && opts.password != undefined) {\n                params.data.username = opts.username;\n                params.data.password = opts.password;\n            }\n        }\n        rest.get(this.api_url + 'get_user_groups', params).on('complete', function(data) {\n            return callback(data);\n        });\n    },\n\n    /**\n     * TODO: Ask slideshare to fix this, get_user_favorites returns 'No API Key provided'\n     * Get user favorites\n     * @param {string} username_for username of owner of slideshows\n     * @return {Object} An object containing an array of favorites\n     */\n    getUserFavorites: function(username_for, callback) {\n        var params = this.coreParams();\n        params.data.username_for = username_for;\n        rest.get(this.api_url + 'get_user_favorites', params).on('complete', function(data) {\n            return callback(data);\n        });\n    },\n\n    /**\n     * TODO: See why the limit option does not work\n     * Get user contacts\n     * @param {string} username_for username of owner of slideshows\n     * @param {Object} opts Optional parameters, for example { limit: 10, offset: 2 }, or null.\n     * @return {Object} An object containing an array of contacts\n     */\n    getUserContacts: function(username_for, opts, callback) {\n        var params = this.coreParams();\n        params.data.username_for = username_for;\n        if(opts != null) {\n            params.data.limit = opts.limit;\n            params.data.offset = opts.offset;\n        }\n        console.log(params);\n        rest.get(this.api_url + 'get_user_contacts', params).on('complete', function(data) {\n            return callback(data);\n        });\n    },\n\n    /**\n     * Get user tags\n     * @param {string} username username\n     * @param {string} password password\n     * @return {Object} An object containing an array of Tags\n     */\n    getUserTags: function(username, password, callback) {\n        var params = this.coreParams();\n        params.data.username = username;\n        params.data.password = password;\n        rest.get(this.api_url + 'get_user_tags', params).on('complete', function(data) {\n            return callback(data);\n        });\n    }\n};\n\nmodule.exports = SlideShare;\n"],"sourceRoot":"/Users/paulopires/Workspace/Github/paulohp/node-slideshare/lib"}