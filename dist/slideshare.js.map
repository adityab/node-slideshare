{"version":3,"sources":["slideshare.js"],"names":[],"mappings":"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","file":"slideshare.js","sourcesContent":["import rest from 'restler';\nimport url from 'url';\nimport utils from '../utils';\n\nconst api_url = 'https://www.slideshare.net/api/2/';\nexport default class SlideShare {\n\n  constructor(key, secret) {\n    this.api_key = key;\n    this.secret = secret;\n  }\n\n  // API Calls\n  /**\n   * Get a slideshow by it's id\n   * @param {string} id The id of the slideshow\n   * @return {Object} A slideshow object\n   */\n  getSlideshowById(id, opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    opts.slideshow_id = id;\n    this.getSlideshow(opts, callback);\n  }\n\n    /**\n     * Get a slideshow by its url\n     * @param {string} slideShareUrl The url of the slideshow\n     * @return {Object} A slideshow object\n     */\n    getSlideshowByURL(slideShareUrl, opts, callback) {\n      if (typeof opts === 'function') {\n        callback = opts;\n        opts = {};\n      }\n      opts = opts || {};\n      // The SlideShare API does not take URLs that have querystring parameters so we condense `slideshow_url`\n      // to the minimal URL.\n      // ex: Given `http://www.slideshare.net/username/slideshow?from_search=4` we will request:\n      // `http://www.slideshare.net/username/slideshow`\n      var parsedUrl = url.parse(slideShareUrl);\n      opts.slideshow_url = parsedUrl.protocol + '//' + parsedUrl.host + parsedUrl.pathname;\n      this.getSlideshow(opts, callback);\n    }\n\n    getSlideshow (opts, callback) {\n        var params = utils.coreParams(this.api_key, this.secret);\n        for (var key in opts) {\n          params.data[key] = opts[key];\n        }\n        rest.get(api_url + 'get_slideshow', params).on('complete', (data) => {\n          return callback(data);\n        });\n    }\n\n    /**\n     * Get slideshows by a tag name\n     * @param {string} tag The tag name\n     * @param {Object} opts Optional parameters, for example { limit: 10, offset: 2, detailed: true }, or null.\n     * @return {Object} An object containing an array of slideshows\n     */\n    getSlideshowsByTag (tag, opts, callback) {\n        var params = utils.coreParams(this.api_key, this.secret);\n        params.data.tag = tag;\n        if(opts != null) {\n          params.data.limit = opts.limit;\n          params.data.offset = opts.offset;\n          params.data.detailed = opts.detailed;\n        }\n        rest.get(api_url + 'get_slideshows_by_tag', params).on('complete', (data) => {\n          return callback(data);\n        });\n    }\n\n    /**\n     * Get slideshows by a group\n     * @param {string} group_name The group name\n     * @param {Object} opts Optional parameters, for example { limit: 10, offset: 2, detailed: true }, or null.\n     * @return {Object} An object containing an array of slideshows\n     */\n    getSlideshowsByGroup (group_name, opts, callback) {\n      var params = utils.coreParams(this.api_key, this.secret);\n      params.data.group_name = group_name;\n      if(opts != null) {\n        params.data.limit = opts.limit;\n        params.data.offset = opts.offset;\n        params.data.detailed = opts.detailed;\n      }\n      rest.get(api_url + 'get_slideshows_by_group', params).on('complete', (data) => {\n        return callback(data);\n      });\n    }\n\n    /**\n     * Get slideshows by user\n     * @param {string} username_for username of owner of slideshows\n     * @param {Object} opts Optional parameters, for example { username: 'john', password: 'doe', limit: 10, offset: 2, detailed: true, get_unconverted: false }, or null.\n     * @return {Object} An object containing an array of slideshows\n     */\n    getSlideshowsByUser (username_for, opts, callback) {\n      var params = utils.coreParams(this.api_key, this.secret);\n      params.data.username_for = username_for;\n      if(opts != null) {\n        if(opts.username != undefined && opts.password != undefined) {\n          params.data.username = opts.username;\n          params.data.password = opts.password;\n        }\n        params.data.limit = opts.limit;\n        params.data.offset = opts.offset;\n        params.data.detailed = opts.detailed;\n        params.data.get_unconverted = opts.get_unconverted;\n      }\n      rest.get(api_url + 'get_slideshows_by_user', params).on('complete', (data) => {\n        return callback(data);\n      });\n    }\n\n    /**\n     * Search Slideshows\n     * @param {string} q the query string\n     * @param {Object} opts Optional parameters, for example { page: 2, items_per_page: 10, lang: 'en', sort: 'latest', fileformat: 'pdf', detailed: true }, or null.\n     * @return {Object} An object containing an array of slideshows\n     */\n    searchSlideshows (q, opts, callback) {\n      var params = utils.coreParams(this.api_key, this.secret);\n      params.data.q = q;\n      if(opts != null) {\n        params.data.detailed = opts.detailed;\n        params.data.page = opts.page;\n        params.data.items_per_page = opts.items_per_page;\n        params.data.lang = opts.lang;\n        params.data.sort = opts.sort;\n        params.data.upload_date = opts.upload_date;\n        params.data.what = opts.what;\n        params.data.download = opts.download;\n        params.data.fileformat = opts.fileformat;\n        params.data.file_type = opts.file_type;\n        params.data.cc = opts.cc;\n        params.data.cc_adapt = opts.cc_adapt;\n        params.data.cc_commercial = opts.cc_commercial;\n      }\n      rest.get(api_url + 'search_slideshows', params).on('complete', (data) => {\n        return callback(data);\n      });\n    }\n\n    /**\n     * Get user groups\n     * @param {string} username_for username of owner of slideshows\n     * @param {Object} opts Optional parameters, for example { username: 'john', password: 'doe' }, or null.\n     * @return {Object} An object containing an array of groups\n     */\n    getUserGroups (username_for, opts, callback) {\n      var params = utils.coreParams(this.api_key, this.secret);\n      params.data.username_for = username_for;\n      if(opts != null) {\n        if(opts.username != undefined && opts.password != undefined) {\n          params.data.username = opts.username;\n          params.data.password = opts.password;\n        }\n      }\n      rest.get(api_url + 'get_user_groups', params).on('complete', (data) => {\n        return callback(data);\n      });\n    }\n\n    /**\n     * TODO: Ask slideshare to fix this, get_user_favorites returns 'No API Key provided'\n     * Get user favorites\n     * @param {string} username_for username of owner of slideshows\n     * @return {Object} An object containing an array of favorites\n     */\n    getUserFavorites (username_for, callback) {\n      var params = utils.coreParams(this.api_key, this.secret);\n      params.data.username_for = username_for;\n      rest.get(api_url + 'get_user_favorites', params).on('complete', (data) => {\n        return callback(data);\n      });\n    }\n\n    /**\n     * TODO: See why the limit option does not work\n     * Get user contacts\n     * @param {string} username_for username of owner of slideshows\n     * @param {Object} opts Optional parameters, for example { limit: 10, offset: 2 }, or null.\n     * @return {Object} An object containing an array of contacts\n     */\n    getUserContacts (username_for, opts, callback) {\n      var params = utils.coreParams(this.api_key, this.secret);\n      params.data.username_for = username_for;\n      if(opts != null) {\n        params.data.limit = opts.limit;\n        params.data.offset = opts.offset;\n      }\n      console.log(params);\n      rest.get(api_url + 'get_user_contacts', params).on('complete', (data) => {\n        return callback(data);\n      });\n    }\n\n    /**\n     * Get user tags\n     * @param {string} username username\n     * @param {string} password password\n     * @return {Object} An object containing an array of Tags\n     */\n    getUserTags (username, password, callback) {\n      var params = utils.coreParams(this.api_key, this.secret);\n      params.data.username = username;\n      params.data.password = password;\n      rest.get(api_url + 'get_user_tags', params).on('complete', (data) => {\n        return callback(data);\n      });\n    }\n\n}\n"],"sourceRoot":"/Users/paulopires/Workspace/Github/paulohp/node-slideshare/src"}